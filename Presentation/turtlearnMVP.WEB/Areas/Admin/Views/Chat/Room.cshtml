@{
    var messangerId = ViewBag.MessangerId as string;
}
<meta charset="UTF-8">
<link href="~/lib/scenary/controls/styles.css" rel="stylesheet" />
<link href="~/lib/scenary/general/styles.css" rel="stylesheet" />
<link href="~/lib/scenary/core/styles.css" rel="stylesheet" />
<link href="~/css/zurafworks/chat.css" rel="stylesheet" />
<script src="~/lib/scenary/core/script.js"></script>
<link rel="stylesheet" href="https://maxst.icons8.com/vue-static/landings/line-awesome/line-awesome/1.3.0/css/line-awesome.min.css">
<style>
    .role-scroll {
        overflow-y: auto;
        max-height: 70vh;
    }

        .role-scroll::-webkit-scrollbar-track {
            -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);
            border-radius: 10px;
            background-color: #F5F5F5;
        }

        .role-scroll::-webkit-scrollbar {
            width: 12px;
            background-color: #F5F5F5;
        }

        .role-scroll::-webkit-scrollbar-thumb {
            border-radius: 10px;
            -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3);
            background-color: #538662;
        }
</style>
<!--BURADAN İTİBAREN CHAT-->
@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <!--BURADAN İTİBAREN GÖRÜNTÜLÜ GÖRÜŞME-->

    <script src="~/lib/scenary/controls/script.js"></script>

    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script src="https://unpkg.com/peerjs@1.3.2/dist/peerjs.min.js"></script>
    <script type="text/javascript">
        var groupname = $('#messengerGroupName').val();
        var connection = new signalR.HubConnectionBuilder().withUrl("/liveMeetingHub").build();
        // const roleScroll = document.getElementById("role-scroll"); // Get the element

        const observer = new IntersectionObserver((entries) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    entry.target.scrollIntoView();
                    observer.unobserve(entry.target);  // Stop observing after it's visible
                }
            });
        });

        function convertUtcToDate(utcDateStr) {
            // UTC zamanıyla gelen tarih
            var utcDate = new Date(utcDateStr); // Örnek bir UTC tarihi

            // Tarayıcının zaman dilimini al Örn : '2024-01-06T12:34:56Z'
            var browserTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;

            // Tarayıcının zaman dilimine göre tarihi formatla
            var localDate = new Date(utcDate.toLocaleString('en-US', { timeZone: browserTimeZone }));
            return localDate.toLocaleString();
        }

        function sendMessageHub() {
            if ($('#txtMessage').val().length > 0) {
                var message = $('#txtMessage').val();
                var senderName = '@User.Identity.Name';
                connection.invoke("SendGroupMessage", groupname, message, senderName).catch(function (err) {
                    return console.error(err.toString());
                });
                $('#txtMessage').val('');
                $('#txtMessage').focus();
            }
        }

        // function receiveMessageHub() {
        //     connection.on("ReceiveGroupMessage", (name, msgDate, connectionId) => {
        //         var bgClassName = connectionId == connection.connectionId ? 'bg-success' : 'bg-info';
        //         $('#listName').append($('<li>').addClass('list-group-item ' + bgClassName).text(convertUtcToDate(msgDate) + " : " + name))
        //     });
        // }

        function receiveMessageHub() {
            connection.on("ReceiveGroupMessage", (message, msgDate, connectionId, senderName) => {
                // debugger;
                var liElement = $('<li>').css('margin-top', '10px');;
                var msgElement = $('<div>').addClass('msg');
                if (connectionId == connection.connectionId) {
                    msgElement.addClass('right-msg');
                } else {
                    msgElement.addClass('left-msg');
                }

                var msgBubbleElement = $('<div>').addClass('msg-bubble');
                var msgInfoElement = $('<div>').addClass('msg-info');
                var msgInfoNameElement = $('<div>').addClass('msg-info-name').text(senderName);
                var msgInfoTimeElement = $('<div>').addClass('msg-info-time').text(convertUtcToDate(msgDate));
                var msgTextElement = $('<div>').addClass('msg-text').text(message);

                msgInfoElement.append(msgInfoNameElement, msgInfoTimeElement);
                msgBubbleElement.append(msgInfoElement, msgTextElement);
                msgElement.append(msgBubbleElement);

                liElement.append(msgElement);  // Append the msg element to the li element
                // debugger;
                $('#listName').append(liElement);  // Append the li element to the list
                // $('#listName').append(msgElement);
                // roleScroll.scrollTop = roleScroll.scrollHeight; // Scroll to bottom
                // const element = document.querySelector('.new-element');
                // liElement.scrollIntoView(liElement);
                // debugger;
                // $('#listName').scrollTop($('#listName')[0].scrollHeight);
                observer.observe(liElement[0]);
            });
        }

        function eventSendMessage() {
            $('#btnSenderName').click(() => {
                sendMessageHub();
            });
            $('#txtMessage').on('keyup', function (event) {
                if (event.keyCode === 13) {
                    sendMessageHub();
                }
            });
        }

        $(document).ready(function () {
            function ShowConnectionState() {
                $('#connectionState').html(`<div class="alert alert-success">Connection Status : ${connection.q} </div>`);
            }
            connection.start().then(() => {
                ShowConnectionState();
                connection.invoke("JoinGroupChat", groupname).catch(function (err) {
                    console.error(err.toString());
                });
            }).catch((err) => {
                ShowConnectionState();
                console.log('Hata : ' + err.toString());
            });

            eventSendMessage();
            receiveMessageHub();
        });


        // <!--BURADAN YUKARUSI CHAT AŞAĞISI VİDEO-- >

        const ROOM_ID = '@ViewBag.roomId'

        const videoElements = [];
        let userId = null
        let localStream = null
        let scenary = document.getElementsByClassName("Scenary")[0];
        let userPeerIds = {};

        //mic cam check
        let micState = false;
        let cameraState = false;


        // create dish
        let dish = new Dish(scenary);

        // set controls (optional)
        let controls = new Controls(dish, scenary);

        // const connection = new signalR.HubConnectionBuilder().withUrl("/liveMeetingHub").build();

        const myPeer = new Peer()


        myPeer.on('open', id => {
            userId = id;
            const startSignalR = async () => {
                console.log(`Local user ID: ${userId} mypeer on open`);
                const now = new Date();
                console.log(`Time: ${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}`); // Log current time
                console.log(`--------------------------------------------------------------`); // Log current time
                // await connection.start();
                await connection.invoke("JoinRoom", ROOM_ID, userId)
                connection.on('user-connected', onUserConnected)
                var newVideoElement = document.createElement('video');
                newVideoElement.srcObject = localStream;

                // userPeerIds[userId] = id;

                ///bağlanınca eskiler için
                // connection.invoke('GetConnectedUsers')
                //     .then(connectedUsers => {
                //         for (const connectedUserId of connectedUsers) {
                //             // Mevcut kullanıcılar için debugger; addVideo kullanın
                //             debugger; addVideo(null, connectedUserId); // videoElement parametresi yok
                //             // ... (diğer kod aynı kalır)
                //         }
                //     });

                // debugger;  controls.addVideo(newVideoElement, userId);

            }
            startSignalR();
        })

        const onUserConnected = (id) => {
            userId = id;
            console.log(`Local user ID: ${userId} onuserconnected`);
            const now = new Date();
            console.log(`Time: ${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}`); // Log current time
            console.log(`--------------------------------------------------------------`); // Log current time
        }


        const videoGrid = document.querySelector('[video-grid]')
        const myVideo = document.createElement('video')


        navigator.mediaDevices.getUserMedia({
            audio: true,
            video: true
        }).then(stream => {
            debugger;
            console.log(`User connected: ${stream.id} (method: navigator media devices)`);
            const now = new Date();
            console.log(`Time: ${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}`); // Log current time
            console.log(`--------------------------------------------------------------`); // Log current time
            debugger;
            debugger; addVideoStream(myVideo, stream, stream.id); // Log user ID

            localStream = stream;


            // connection.invoke('JoinCall', userId, stream.id).then(() => {
            //     console.log('Joined the video call.');
            // });

            
        })

        connection.on('user-connected', (_userId, peerId) => {
            // userPeerIds nesnesindeki her anahtar/değer çifti için konsola log bas
            
                
                connection.invoke("GetList").then(list => {
                    list.forEach((key) => {
                        addVideoStream(myVideo, localStream, key);
                    connection.invoke("AddToList", key).catch(err => console.error(err.toString()));
                    })
                }).catch(err => console.error(err.toString()));

            userPeerIds[_userId] = _userId;
            userId = _userId;

                connection.invoke("AddToList", _userId).catch(err => console.error(err.toString()));
            

            connection.on('receiveExistingVideos', (existingVideos) => {
                // Render the existing videos on the client-side
                for (const videoInfo of existingVideos) {
                    // debugger; addVideoStream(localStream, videoInfo.streamUrl);
                }
            });

            debugger;
            console.log(`User connected: ${_userId} (method: connection on userconnected)`);
            const now = new Date();
            console.log(`Time: <span class="math-inline">\{now\.getHours\(\)\}\:</span>{now.getMinutes()}:${now.getSeconds()}`); // Log current time
            console.log(`--------------------------------------------------------------`); // Log current time
             connectedNewUser(_userId, localStream); // Her yeni bağlantıda bu fonksiyonu çağırın
            // Mevcut kullanıcı varsa onun video akışını da ekleyin (aşağıdaki koda bakın)
            // Mevcut kullanıcıların video akışlarını yeni kullanıcıyla paylaş
            debugger;


            
            if (userId === _userId) return;
        });

        myPeer.on('call', call => {
            call.answer(localStream);

            const userVideo = document.createElement('video');
            // call.on('stream', userVideoStream => {
            //     console.log(`Adding video stream for user ${userId} (method: mypeer on call)`); // Log with user ID
            //     const now = new Date();
            //     console.log(`Time: ${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}`); // Log current time
            //     console.log(`--------------------------------------------------------------`); // Log current time
            //     debugger;
            //     debugger; addVideoStream(userVideo, userVideoStream);
            // });
            addVideoStream(localStream, userId);
        });

        const addVideoStream = (video, stream, userId) => {
            video.srcObject = stream;
            video.addEventListener('loadedmetadata', () => {
                // video.play()
            });
            console.log(`Adding video stream for user ${userId}`);
            const now = new Date();
            console.log(`Time: ${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}`);
            console.log(`--------------------------------------------------------------`);

            // Yeni video öğesini oluşturun
            const newVideoElement = document.createElement('video');
            newVideoElement.srcObject = stream;

          
            debugger;  controls.addVideo(newVideoElement, userId);
        };

    

        document.addEventListener('DOMContentLoaded', async () => {
            // Load existing videos first
            const existingVideos = await loadExistingVideos();
            if (!existingVideos || !Array.isArray(existingVideos)) {
                console.warn('No existing videos found.');
                // Handle the case of no existing videos (e.g., display a message)
                return;
            }

            // Existing videos are available, iterate through them
            for (const videoInfo of existingVideos) {
                const userId = videoInfo.userId; // Replace with the appropriate property name
                const streamUrl = videoInfo.streamUrl; // Replace with the appropriate property name (if applicable)
                debugger; addVideoStream(video, streamUrl, userId); // You might need to modify debugger; addVideoStream if not using MediaStreams
            }

            // Rest of your code for handling new user connections (unchanged)
        });

        async function loadExistingVideos() {

            connection.invoke('GetExistingVideos')
                .then(existingVideos => {
                    for (const videoInfo of existingVideos) {
                        const userId = videoInfo.userId; // Replace with the appropriate property name
                        const streamUrl = videoInfo.streamUrl; // Replace with the appropriate property name (if applicable)
                        debugger;
                        debugger; addVideoStream(video, streamUrl, userId); // You might need to modify debugger; addVideoStream if not using MediaStreams
                    }
                });


        }

        const connectedNewUser = (userId, localStream) => {
            debugger;
            const userVideo = document.createElement('video');
            // Yeni kullanıcıyı PeerJS ile ara
            const peerId = userPeerIds[userId]; // userId ile connectionId (peerId) yi al
            if (peerId) {
                const call = myPeer.call(peerId, localStream);
                call.on('stream', userVideoStream => {
                    console.log(`Kullanıcı ${userId} için video akışı ekleniyor`);
                    debugger;
                    debugger; addVideoStream(userVideo, userVideoStream, userId);
                });
            }

        };
    </script>
}
@* <video controls="controls">
    <source src="" type="video/mp4" />
</video> *@
<style>
    div[video-grid] {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)); /* En az 100 piksel genişlik, istenirse fr kullanarak orantılı genişlik */
        gap: 10px;
    }

        div[video-grid] > video {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }

    .video-widget {
        height: 70vh;
    }

    .video-title {
        margin-bottom: 0px !important;
    }
</style>


@* <div class="row">
    <div class="col-lg-9">
        <div class="widgets">
            <div class="widget widget-serach video-widget">
                <div class="widget">

                    <div class="widget-content" style="height:70vh">
                        <div video-grid>
                        </div>
                    </div>
                    @*   <div class="widget-title video-title">
                    <h6>İçerik Başlığı</h6>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-lg-3">
        <div class="widgets">
            <div class="widget widget-serach">
                <div class="widget">

                    <div class="widget-content">
                        <div video-grid>
                        </div>
                    </div>
                    <div class="widget-title">
                        <h6>Type</h6>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<hr /> *@
<div class="row">
    @* <hr /> *@
    <div class="col-lg-9">
        <div class="widgets">
            <div class="widget widget-serach video-widget">
                <div class="widget">

                    <div class="widget-content" style="height:70vh">
                        <div class="Scenary"></div>
                    </div>
                    @*   <div class="widget-title video-title">
                    <h6>İçerik Başlığı</h6>
                    </div> *@
                </div>
            </div>
        </div>
    </div>

    <div class="col-lg-3">
        <div class="widgets">
            <div class="widget widget-serach video-widget">
                <div class="widget">

                    <div class="widget-content role-scroll" style="height:70vh">
                        @*  <section class="space-ptb">
                        <div class="container"> *@
                        <div class="row">
                            <div class="col-md-12">
                                Herkese Açık Sohbete Hoşgeldiniz...
                                @* <div class="mb-4">
                                <label for="name" class="form-label">Mesaj :</label>
                                <input type="text" class="form-control" id="txtMessage" placeholder="">
                                </div>
                                <hr />
                                <button class="btn btn-primary" id="btnSenderName">Gönder</button>
                                <hr /> *@
                                <div class="clearfix"></div>
                                <div class="col-md-12">
                                    <ul class="list-group" id="listName">
                                    </ul>
                                </div>
                            </div>
                        </div>
                        @*         </div>
                        </section> *@
                    </div>
                    <div class="widget-title video-title">
                        <div class="row">
                            <div class="col-md-8">
                                @* <label for="name" class="form-label">Mesaj :</label> *@
                                <input type="text" class="form-control" id="txtMessage" placeholder="">
                            </div>
                            <div class="col-md-4">

                                <button class="btn btn-primary" id="btnSenderName">Gönder</button>
                            </div>
                        </div>
                        <input type="hidden" id="messengerGroupName" value="@messangerId" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<div style="position:fixed; margin-bottom: 5px; margin-left:5px; max-width:500px;" id="connectionState">
</div>


<!--BURADAN İTİBAREN GÖRÜNTÜLÜ GÖRÜŞME-->

<script src="~/lib/scenary/controls/script.js"></script>

<script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
<script src="https://unpkg.com/peerjs@1.3.2/dist/peerjs.min.js"></script>

<script>


    // const ROOM_ID = '@ViewBag.roomId'

    // const videoElements = [];
    // let userId = null
    // let localStream = null
    // let scenary = document.getElementsByClassName("Scenary")[0];
    // let userPeerIds = {};

    // //mic cam check
    // let micState = false;
    // let cameraState = false;


    // // create dish
    // let dish = new Dish(scenary);

    // // set controls (optional)
    // let controls = new Controls(dish, scenary);

    // // const connection = new signalR.HubConnectionBuilder().withUrl("/liveMeetingHub").build();

    // const myPeer = new Peer()

    // // myPeer.on('open', id => {
    // //     userId = id;
    // //     const startSignalR = async () => {
    // //         await connection.start();
    // //         await connection.invoke("JoinRoom", ROOM_ID, userId)
    // //         connection.on('user-connected', id => {
    // //             console.log(`User connected : ${id}`)
    // //         })
    // //     }
    // //     startSignalR();
    // // })

    // myPeer.on('open', id => {
    //     userId = id;
    //     const startSignalR = async () => {
    //         console.log(`Local user ID: ${userId} mypeer on open`);
    //         const now = new Date();
    //         console.log(`Time: ${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}`); // Log current time
    //         console.log(`--------------------------------------------------------------`); // Log current time
    //         await connection.start();
    //         await connection.invoke("JoinRoom", ROOM_ID, userId)
    //         connection.on('user-connected', onUserConnected)

    //     }
    //     startSignalR();
    // })

    // const onUserConnected = (id) => {
    //     userId = id;
    //     console.log(`Local user ID: ${userId} onuserconnected`);
    //     const now = new Date();
    //     console.log(`Time: ${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}`); // Log current time
    //     console.log(`--------------------------------------------------------------`); // Log current time
    // }


    // const videoGrid = document.querySelector('[video-grid]')
    // const myVideo = document.createElement('video')
    // // myVideo.muted = true;

    // // navigator.mediaDevices.getUserMedia({
    // //     audio: true,
    // //     video: true
    // // }).then(stream => {
    // //     debugger;
    // //     debugger; addVideoStream(myVideo, stream)

    // //     localStream = stream
    // // }).catch(error => {
    // //     console.error('Microphone access denied:', error);
    // // });

    // navigator.mediaDevices.getUserMedia({
    //     audio: true,
    //     video: true
    // }).then(stream => {
    //     debugger;
    //     console.log(`User connected: ${stream.id} (method: navigator media devices)`);
    //     const now = new Date();
    //     console.log(`Time: ${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}`); // Log current time
    //     console.log(`--------------------------------------------------------------`); // Log current time
    //     debugger; addVideoStream(myVideo, stream, stream.id); // Log user ID
    //     localStream = stream;
    // })

    // connection.on('user-connected', id => {
    //     debugger;
    //     console.log(`User connected: ${id} (method: connection on userconnected)`);
    //     const now = new Date();
    //     console.log(`Time: <span class="math-inline">\{now\.getHours\(\)\}\:</span>{now.getMinutes()}:${now.getSeconds()}`); // Log current time
    //     console.log(`--------------------------------------------------------------`); // Log current time
    //     // connectedNewUser(id, localStream); // Her yeni bağlantıda bu fonksiyonu çağırın
    //     // Mevcut kullanıcı varsa onun video akışını da ekleyin (aşağıdaki koda bakın)
    //     // Mevcut kullanıcıların video akışlarını yeni kullanıcıyla paylaş
    //     connection.invoke('GetConnectedUsers')
    //         .then(connectedUsers => {
    //             for (const connectedUserId of connectedUsers) {
    //                 if (connectedUserId === userId) continue;
    //                 const connectedPeerId = userPeerIds[connectedUserId];
    //                 if (connectedPeerId) {
    //                     myPeer.call(connectedPeerId, localStream);
    //                 }
    //             }
    //         });
    //     if (userId === id) return;
    // });

    // myPeer.on('call', call => {
    //     call.answer(localStream);

    //     const userVideo = document.createElement('video');
    //     call.on('stream', userVideoStream => {
    //         console.log(`Adding video stream for user ${userId} (method: mypeer on call)`); // Log with user ID
    //         const now = new Date();
    //         console.log(`Time: ${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}`); // Log current time
    //         console.log(`--------------------------------------------------------------`); // Log current time
    //         debugger; addVideoStream(userVideo, userVideoStream);
    //     });
    // });


    // const debugger; addVideoStream = (video, stream, userId) => {
    //     video.srcObject = stream;
    //     video.addEventListener('loadedmetadata', () => {
    //         // video.play()
    //     });
    //     console.log(`Adding video stream for user ${userId} (method: debugger; addVideoStream)`); // Log with user ID and method name
    //     const now = new Date();
    //     console.log(`Time: ${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}`); // Log current time
    //     console.log(`--------------------------------------------------------------`); // Log current time
    //     // videoGrid.appendChild(video)
    //     // controls.append();
    //     debugger;  controls.addVideo(video, userId);
    // };

    // // const connectedNewUser = (userId, localStream) => {
    // //     const userVideo = document.createElement('video');
    // //     // Yeni kullanıcıyı arayın
    // //     const call = myPeer.call(userId, localStream);

    // //     call.on('stream', userVideoStream => {
    // //         console.log(`Adding video stream for user ${userId}`);
    // //         debugger; addVideoStream(userVideo, userVideoStream, userId);
    // //     });

    // //     // Mevcut kullanıcılara kendinizi gösterin
    // //     connection.invoke('GetConnectedUsers')
    // //         .then(connectedUsers => {
    // //             for (const connectedUserId of connectedUsers) {
    // //                 if (connectedUserId === userId) continue; // Kendinizi aramayın
    // //                 myPeer.call(connectedUserId, localStream);
    // //             }
    // //         });
    // // };

    // const connectedNewUser = (userId, localStream) => {
    //     const userVideo = document.createElement('video');
    //     // Yeni kullanıcıyı PeerJS ile ara
    //     const peerId = userPeerIds[userId]; // userId ile connectionId (peerId) yi al
    //     if (peerId) {
    //         const call = myPeer.call(peerId, localStream);
    //         call.on('stream', userVideoStream => {
    //             console.log(`Kullanıcı ${userId} için video akışı ekleniyor`);
    //             debugger; addVideoStream(userVideo, userVideoStream, userId);
    //         });
    //     }

    //     // Mevcut kullanıcılara kendinizi gösterin
    //     connection.invoke('GetConnectedUsers')
    //         .then(connectedUsers => {
    //             for (const connectedUserId of connectedUsers) {
    //                 if (connectedUserId === userId) continue; // Kendinizi aramayın
    //                 const connectedPeerId = userPeerIds[connectedUserId]; // userId ile connectionId (peerId) yi al
    //                 if (connectedPeerId) {
    //                     myPeer.call(connectedPeerId, localStream);
    //                 }
    //             }
    //         });
    // };
</script>

<script>
    window.addEventListener("load", function () {
        debugger;
        // select parent of dish

        controls.append();

        // render dish
        dish.append();

        // resize the cameras
        dish.resize()

        // resize event of window
        window.addEventListener("resize", function () {

            // resize event to dimension cameras
            dish.resize();

        });

    }, false);
</script>


<!--BURADAN İTİBAREN CHAT-->
