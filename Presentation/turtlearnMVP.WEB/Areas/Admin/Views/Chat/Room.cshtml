@{
}
<style>
    div[video-grid] {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)); /* En az 100 piksel genişlik, istenirse fr kullanarak orantılı genişlik */
        gap: 10px;
    }

        div[video-grid] > video {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
</style>
<div video-grid>
</div>
<script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
<script src="https://unpkg.com/peerjs@1.3.2/dist/peerjs.min.js"></script>
<script>
    const ROOM_ID = '@ViewBag.roomId'
    let userId = null
    let localStream = null

    const connection = new signalR.HubConnectionBuilder().withUrl("/liveMeetingHub").build();

    const myPeer = new Peer()

    myPeer.on('open', id => {
        userId = id;
        const startSignalR = async () => {
            await connection.start();
            await connection.invoke("JoinRoom", ROOM_ID, userId)
            connection.on('user-connected', id => {
                console.log(`User connected : ${id}`)
            })
        }
        startSignalR();
    })

    const videoGrid = document.querySelector('[video-grid]')
    const myVideo = document.createElement('video')
    myVideo.muted = true;

    navigator.mediaDevices.getUserMedia({
        audio: true,
        video: true
    }).then(stream => {
        addVideoStream(myVideo, stream)

        localStream = stream
    })

    connection.on('user-connected', id => {
        if (userId === id) return;
        console.log(`User connected : ${id}`)
        connectedNewUser(id,localStream)
    })
    
    myPeer.on('call',call=>{
        call.answer(localStream)

        const userVideo = document.createElement('video')
        call.on('stream', userVideoStream=>{
            addVideoStream(userVideo,userVideoStream)
        })
    })

    const addVideoStream = (video, stream) => {
        video.srcObject = stream;
        video.addEventListener('loadedmetadata', () => {
            video.play()
        })
        videoGrid.appendChild(video)
    }

    const connectedNewUser = (userId, localStream) => {
        const userVideo = document.createElement('video')
        const call = myPeer.call(userId,localStream)
        
        call.on('stream', userVideoStream => {
            addVideoStream(userVideo, userVideoStream)
        })
    }
</script>